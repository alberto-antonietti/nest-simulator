/*
 *  test_connect_after_simulate.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /* BeginDocumentation
   Name: testsuite::test_connect_after_simulate

   Synopsis: (test_connect_after_simulate) run

   Description:

   Tests that it is possible to create connections between two
   Simulate calls.

   FirstVersion: 02/06/2016
   Author: Susanne Kunkel, Jakob Jordan
   SeeAlso: Connect
 */

M_ERROR setverbosity

(unittest) run
/unittest using

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% create second connection after a call to simulate and check whether
% it is created correctly

ResetKernel

/neuron /iaf_psc_delta << /I_e 500. >> Create def
/parrot /parrot_neuron Create def
/dummys /iaf_psc_delta 10 Create def
/detector /spike_detector Create def

[neuron] [parrot] Connect
[3 dummys] Range cvgidcollection [3 dummys] Range cvgidcollection Connect
[parrot] [detector] Connect

20 Simulate

<< /target [parrot] >> GetConnections size 1 eq assert_or_die
<< /target [parrot] >> GetConnections 0 get cva 4 get 0 eq assert_or_die
detector GetStatus /n_events get 1 eq assert_or_die

[neuron] [parrot] Connect

<< /target [parrot] >> GetConnections size 2 eq assert_or_die
<< /target [parrot] >> GetConnections 0 get cva 4 get 0 eq assert_or_die
% before call to simulate connections are not sorted by source, so
% port of second connection should be 101
<< /target [parrot] >> GetConnections 1 get cva 4 get 101 eq assert_or_die

20 Simulate

<< /target [parrot] >> GetConnections size 2 eq assert_or_die
<< /target [parrot] >> GetConnections 0 get cva 4 get 0 eq assert_or_die
% after call to simulate connections should be sorted, so port of
% second connection should be 1
<< /target [parrot] >> GetConnections 1 get cva 4 get 1 eq assert_or_die
detector GetStatus /n_events get 3 eq assert_or_die
